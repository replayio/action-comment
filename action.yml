name: Replay Comment
author: Replay.io
description: Run and record Playwright tests with Replay
inputs:
  api-key:
    required: true
    description: Replay.io API Key
  issue-number:
    required: true
    description: Pull Request on which to comment
  recordings:
    description: Array of uploaded recordings from the Replay CLI. If `recordings-path` is also provided, `recordings` takes precedence.
  recordings-path:
    description: Path to a file containing array of uploaded recordings from the Replay CLI. If `recordings` is also provided, `recordings` takes precedence.
  summary-message:
    default: |
      We uploaded **{count, plural,
        one {# replay}
        other {# replays}
      }** linked below.
  test-run-id:
    description: UUID of the Replay test run
  test-run-message:
    default: You can also view the [entire test run]({link}) on Replay.
runs:
  using: composite
  steps:
    - name: 'Comment PR'
      uses: actions/github-script@v6
      if: ${{ always() }}
      with:
        result-encoding: string
        script: |
          const fs = require("fs");
          const comment = require(process.env.GITHUB_ACTION_PATH + '/dist/comment.js');

          const apiKey = "${{ inputs.api-key }}";
          const issue_number = "${{ inputs.issue-number }}";
          let recordings = ${{ inputs.recordings || 'null' }};
          const recordingsPath = ${{ inputs.recordings-path || 'null' }};
          const summaryMessage =  `${{ inputs.summary-message }}`;
          const testRunMessage =  `${{ inputs.test-run-message }}`;
          const testRunId = "${{ inputs.test-run-id }}";


          if (!recordings && recordingsPath) {
            try {
              recordings = JSON.parse(fs.readFileSync(recordingsPath).toString());
            } catch (e) {
              console.error(e);
            }
          }

          if (!recordings && !recordingsPath) {
            console.error("No recordings provided.");
            return;
          }

          return await comment({
            apiKey,
            context,
            github,
            issue_number,
            recordings,
            summaryMessage,
            testRunId,
            testRunMessage,
          });

